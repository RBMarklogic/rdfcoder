This section is meant to provide the basic knowledge required to understand
the concepts behind _RDFCoder_.

An Object Oriented language like Java is based on the definition of Objects and relationship
among these objects. Any object is constituted of methods and attributes. A method modifies
the attributes of the same object and invokes methods of other objects.
These objects are arranged in logical packages. These packages are grouped inside  physical archives (jars).
All the relationships among archives, packages, classes, attributes methods, and method calls can be
represented as a graph, where nodes are resources (classes, methods attributes, and so on) and links are
the relationship among a couple of resources.
 In general a couple of resources {{{r1}}}, {{{r2}}} and the link {{{l}}} connecting them defines a triple expressed as {{{(r1, l, r2)}}}.

In a basic example, if we have a jar containing the class a.b.MyClass, that defines the methods MyClass.m1() and the
MyClass.m2(), we could express the following triples:

 * {{{(package a, contains, package b}}}
 * {{{(package b, contains, class MyClass}}}
 * {{{(class MyClass, contains, method m1}}}
 * {{{(class MyClass, contains, method m2}}}

RDF is a framework for expressing and manipulating such kind of graphs.

_RDFCoder_ is based on the [http://www.w3.org/RDF/ W3C RDF specification]. 

The main concepts behind _RDFCoder_ are:

 * Graph
 * Ontology
 * RDF: that is a framework for representing graphs.
 * RDFS: that is a schema language for data  represented in RDF.
 * SPARQL: that is a query language for data represented in RDF.

An independent introduction on these topics can be found [http://www.obitko.com/tutorials/ontologies-semantic-web/resource-description-framework.html here].